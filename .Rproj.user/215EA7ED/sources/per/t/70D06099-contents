library(ggplot2)
library(invgamma)
library(plotly)


# Function to plot conjugate model with mean unkown ----
fx_norm_n = function(t0,d,variance,yn,n){

#Input parameters -----  
  #t0:A prior standard deviation
  #d: It indicates how many standard deviations we want the a priori mean of the sample mean.
  #variance: It’s the variance of the likelihood distribution
  #yn: Sample mean
  #n: Sample size
  
  
#Calculated parameters -------
  sigma = sqrt(variance) #Sample standard deviation
  mu0 = mean(yn)+(d*sigma) #A priori mean.It's estimated based as: mu0 = yn ± d*sigma
  
  #The minimum and maximum values are 4 standard deviations away from the sample mean and define the sample range.
  ymin = min(c((yn - 4*sigma),(mu0-4*t0),(mu0-4*sigma))) # Minimum value
  ymax = max(c((yn + 4*sigma),(mu0+4*t0),(mu0+4*sigma))) # Maximum value
  
  tn_2 = t0^2+(sigma^2)/(n) #Standard deviation of posterior distribution
  mn = (((yn*n)/sigma^2)+(mu0/(t0^2)))/((n/(sigma^2))+(1/(t0^2))) #Mean of posterior distribution
  
  xx = seq(ymin, ymax,length.out = 100000) #Generation of the sample of 100000 values

  fy1 = dnorm(x = xx,mean = mu0,sd = t0) #Densities for a priori distribution
  fy2 = dnorm(x = xx,mean = mn,sd = sqrt(tn_2)) #Densities for posterior distribution
  fy3 = dnorm(x = xx,mean = yn,sd =  sigma) #Densities for likelihood distribution
  
  df1 = data.frame(xx,fy1) #Database for a priori distribution
  df2 = data.frame(xx,fy2) #Database for posterior distribution
  df3 = data.frame(xx,fy3) #Database for likelihood distribution
  
#Graph of distributions -----
  p_1 = ggplot(data=df1, aes(x=xx, y=fy1, colour="A priori")) + 
    geom_line(size=0.8)+
    geom_line(size=0.8) +
    geom_line(data=df2, aes(x=xx, y=fy2, colour="Posterior"), size=0.8) +
    geom_line(data=df3, aes(x=xx, y=fy3, colour="Likelihood"), size=0.8) +
    theme_bw() +
    labs(color="Distribution", y= "Density", x="Values") +
    ggtitle("Unknown mean and known variance.") 

  p_1 #Graphic
}


# Function to plot conjugate model with variance unkown ----
fy_ivgamma <- function(a,b,theta,v,n,variance_n){
  
  sigma_n = sqrt(variance_n)
  v0 = 2*a 
  sigma0_2 = (2*b)/v0 
  v= v
  v0_n = (v0+n)/2
  v_n = (n*v+v0*sigma0_2)/2
  
  xmin = min(c((theta - 4*sigma_n),(a-(4*b))))
  xmax = max(c((theta + 4*sigma_n),(a+(4*b))))
  xx = seq(xmin,xmax,length.out = 100000)
  xxig = xx[xx > 0]
  fy1 = dinvgamma(x = xxig,shape = a,scale = 1/b) # apriori
  fy2 = dinvgamma(x = xxig,shape = v0_n,scale = 1/v_n) # posterior
  fy3 = dnorm(x = xx,mean = theta,sd = sigma_n)
  
  df1 = data.frame(xxig,fy1)
  df2 = data.frame(xxig,fy2)
  df3 = data.frame(xx,fy3)
  
  p1 = ggplot(df1, aes(x = xxig,y = fy1, colour="A priori")) + 
    geom_line(size = 0.8)+ # apriori
    geom_line(data=df2, aes(x=xxig,y=fy2, colour="Posterior"),size = 0.8)+ # posterior
    geom_line(data=df3, aes(x=xx,y=fy3, colour="Likelihood"),size = 0.8)+ # verosimilitud
    theme_bw()+
    labs(color = "Distribution.", y= "Density", x="Values"  ) + 
    ggtitle("Known mean and unknown variance.")

  p1
}

#-------------------------------------------------------------
# Multiparametric models.


# Function to plot conjugate model with mean and variance unknown: prior distribution of the mean depends of variance ----
f_norm_uni = function(y_barn, sigma_y, mu0, c, alpha_0, beta_0, n){
#Input parameters -----   
  # n: Sample size
  # mu0: Represents the mean of the a priori distribution conditional on the variance.
  # y_barn: Sample mean
  # sigma_y: Sample variance
  # c: 1/kappa_0
  # alpha_0: shape parameter for a priori distribution
  # beta_0: scale parameter for a priori distribution

#Calculated parameters -------
  nu_0 = 2*alpha_0 
  sigma0_2 = (2*beta_0)/nu_0

  #Likelihood distribution ----
  val_vero = rnorm(100000,mean = y_barn, sd = sqrt(sigma_y)) #Sample
  densfy1 = density(val_vero)
  fy1 = densfy1$y #Sample densities
  df1 = data.frame(val_vero) #Database for the likelihood distribution of theta
  
  #Parameters for a priori of theta ----
  sigma_2 = rinvgamma(1, shape = alpha_0, scale = 1/beta_0) 
  while (sigma_2 == Inf) { #TODAVÍA ES NECESARIO?
    sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0)
  }
  kappa_0 = 1/c #It's the a priori belief that we have about the parameter sigma_2
  val_apriori_theta = rnorm(100000, mean=mu0, sd=sqrt(sigma_2*kappa_0)) #Sample
  densfy2 = density(val_apriori_theta) 
  fy2 = densfy2$y #Sample densities
  df2 = data.frame(val_apriori_theta) #Database for the prior distribution of theta
  
  x = seq(0.01,0.99,length.out = 100000) #Sequence of quantiles from 0.01 to 0.99
  
  #Parameters for a priori of sigma ----
  cuant_apr_sigma = qinvgamma(p = x, shape = alpha_0, scale = 1/beta_0) #Values of the a prior distribution
  den_apri_sigma = dinvgamma(cuant_apr_sigma, shape = alpha_0, scale = 1/beta_0) #Sample densities
  P = ecdf(cuant_apr_sigma)
  df4 = data.frame(cuant_apr_sigma,den_apri_sigma)
  df4_red = df4[df4$cuant_apr_sigma<cuant_apr_sigma[min(which(P(cuant_apr_sigma) > 0.99))],] #Database for the a prior distribution of sigma
  
  #Parameters for posterior of sigma ----
  kappa_n = kappa_0 + n #It's the a priori belief that we have about the parameter sigma_n2
  nu_n = nu_0 + n
  val_vero_m = sample(val_vero, n) #Subsample of the data to calculate parameter nu. It has n values.
  nu = sum((val_vero_m-mu0)^2)/n
  alpha_n = nu_n/2  #Shape parameter for posterior distribution
  beta_n = (n*nu+nu_0*sigma0_2)/2 #Scale parameter for posterior distribution
  sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n) #Posterior variance
  cuant_post_sigma = qinvgamma(p= x, shape= alpha_n, scale = 1/beta_n) #Values of the posterior distribution
  den_post_sigma = dinvgamma(cuant_post_sigma, shape = alpha_n, scale = 1/beta_n) #Distribution densities
  P = ecdf(cuant_post_sigma)
  df5 = data.frame(cuant_post_sigma, den_post_sigma)
  df5_red = df5[df5$cuant_post_sigma<cuant_post_sigma[min(which(P(cuant_post_sigma) > 0.99))],] ##Database for the posterior distribution of sigma

  #Parameters for posterior of theta ------
  gl = n + nu_0 #Degrees of freedom
  mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n) #Mean of the posterior distribution
  val_theta = rt(1000,gl)*sqrt(sigma_n2/(n+kappa_0))+ mu_n #Sample
  dens_val_tehta = density(val_theta)
  fy3 = dens_val_tehta$y #Sample densities
  df3 = data.frame(val_theta) #Database for the posterior distribution of theta
  
#Graph for each parameter -----
  
  # Graph for theta ----
  p_31 = ggplot() +
    geom_density(data=df1, aes(val_vero,colour="Likelihood"), size = 0.8)+
    geom_density(data=df2, aes (val_apriori_theta,colour="A priori - theta" ), size = 0.8) +
    geom_density(data=df3, aes(val_theta,colour = "Marginal posterior - theta" ), size= 0.8)
  
  # Graph for sigma ----
  p_32 = ggplot(data = df4_red, aes(cuant_apr_sigma,den_apri_sigma, colour="A priori"))+
    geom_line(size = 0.8) +
    geom_line(data = df5_red, aes(cuant_post_sigma,den_post_sigma, colour="Posterior"), size= 0.8) +
    labs(color = "Distribution.", y= "Density", x="Values")+
    ggtitle("Mean and variance unknown: prior distribution of the mean depends of variance.", subtitle = "Sigma") +
    theme_bw()

  p_32
  #grid.arrange(p_31, p_32, ncol = 2)
}
g2 <- f_norm_uni(98.25, 0.5376,98.6, 100, 0.001,0.001,130)
g2 <- f_norm_uni(5.5, 2,6, 50, 1,2,5)
g2 <- f_norm_uni(26.21,115.35,25,5,1,0.1,66)
ggplotly(g2$vp)

# Código extra -----
# xmin = min(c((y_barn - 4*sigma_y),(mu0 - (4*sigma_2/kappa_0)),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(mu0 - (4*sigma_2/kappa_0)),(alpha_0+(4*beta_0))))
# #fy1 =  dinvgamma(x = light[light>0], shape =  alpha_0,scale = 1/beta_0)
# val_apriori_s2 = rinvgamma(1000, shape =  alpha_0,scale = 1/beta_0) ##
# densfy1 = density(val_apriori_s2)
# fy1 = densfy1$y HASTA AQUÍ APRIORI SIGMA
# POSTERIOR MARGINAL FOR SIGMA:
# val_sigma = rinvgamma(1000,shape =  alpha_n,scale = 1/beta_n)
# dens_val_sigma <- density(val_sigma)
# fy4 = dens_val_sigma$y
# fy4 = dinvgamma(x = light[light>0], shape =  alpha_n,scale = 1/beta_n)
#line_types = c("A priori - theta"=1,"Likelihood" = 2, "Marginal posterior - theta"=3,"A priori - sigma^2"=4,"Marginal posterior - sigma^2"=5) #