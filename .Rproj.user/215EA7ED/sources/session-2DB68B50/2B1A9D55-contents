library(ggplot2)
library(invgamma)
library(plotly)


# Funci?n to plot conjugate model with mean unkown -----------------------

fx_norm_n = function(t0,d,variance,yn,n){
  
  sigma = sqrt(variance)
  mu0 = mean(yn)+(d*sigma)
  ymin = min(c((yn - 4*sigma),(mu0-4*t0),(mu0-4*sigma)))
  ymax = max(c((yn + 4*sigma),(mu0+4*t0),(mu0+4*sigma)))
  tn_2 = t0^2+(sigma^2)/(n)
  mn = (((yn*n)/sigma^2)+(mu0/(t0^2)))/((n/(sigma^2))+(1/(t0^2)))
  
  xx = seq(ymin, ymax,length.out = 100000)

  fy1 = dnorm(x = xx,mean = mu0,sd = sigma)
  fy2 = dnorm(x = xx,mean = mn,sd = sqrt(tn_2))
  fy3 = dnorm(x = xx,mean = yn,sd =  sigma) ##DUDA sigma/sqrt(n)
  
  df1 = data.frame(xx,fy1)
  df2 = data.frame(xx,fy2)
  df3 = data.frame(xx,fy3)
  
  line_types = c("A priori"=1,"Posterior"=3,"Likelihood" = 2)
  p1 = ggplot(df1, aes(x = xx,y = fy1, colour="A priori")) + 
    geom_line(size = 1.4)+ # apriori
    geom_line(data=df2, aes(x=xx,y=fy2, colour="Posterior"),size = 1.5)+ # posterior
    geom_line(data=df3, aes(x=xx,y=fy3, colour="Likelihood"),size = 1.3)+ # verosimilitud
    theme_bw()+
    labs(color = "Distribution.", y= "Density", x="Values"  ) + 
    ggtitle("Unknown mean and known variance.")+
    scale_linetype_manual(values=line_types)
  p1
}

# Funciton to plot conjugate model with variance unkown -----------------------

fy_ivgamma <- function(a,b,theta,v,n,variance_n){
  
  sigma_n = sqrt(variance_n)
  v0 = 2*a 
  sigma0_2 = (2*b)/v0 
  v= v
  v0_n = (v0+n)/2
  v_n = (n*v+v0*sigma0_2)/2
  
  xmin = min(c((theta - 4*sigma_n),(a-(4*b))))
  xmax = max(c((theta + 4*sigma_n),(a+(4*b))))
  xx = seq(xmin,xmax,length.out = 100000) ###### 100 a 500?
  xxig = xx[xx > 0]
  fy1 = dinvgamma(x = xxig,shape = a,scale = 1/b) # apriori
  fy2 = dinvgamma(x = xxig,shape = v0_n,scale = 1/v_n) # posterior
  fy3 = dnorm(x = xx,mean = theta,sd = sigma_n)
  
  df1 = data.frame(xxig,fy1)
  df2 = data.frame(xxig,fy2)
  df3 = data.frame(xx,fy3)
  
  line_types = c("A priori"=1,"Posterior"=3,"Likelihood" = 2)
  p1 = ggplot(df1, aes(x = xxig,y = fy1, colour="A priori")) + 
    geom_line(size = 1.4)+ # apriori
    geom_line(data=df2, aes(x=xxig,y=fy2, colour="Posterior"),size = 1.5)+ # posterior
    geom_line(data=df3, aes(x=xx,y=fy3, colour="Likelihood"),size = 1.3)+ # verosimilitud
    theme_bw()+
    labs(color = "Distribution.", y= "Density", x="Values"  ) + 
    ggtitle("Known mean and unknown variance.")+
    scale_linetype_manual(values=line_types)
  p1
}


#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# Multiparametric models:

## Scenary 3:
# Mean and variance unknown: prior distribution of the mean depends of variance

############################------- FUNCI?N CON SIMULACI?N---------------------############
f_norm_uni = function(y_barn, sigma_y, mu0, c, alpha_0, beta_0, n){
  nu_0 = 2*alpha_0
  sigma0_2 = (2*beta_0)/nu_0


  #PARAMETROS A PRIORI THETA
  sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) 
  while (sigma_2 == Inf) {
    sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0)
  }

  # Creencia a priori para theta
  kappa_0 = 1/c
  #kappa_0=k0
  
  # xmin = min(c((y_barn - 4*sigma_y),(mu0 - (4*sigma_2/kappa_0)),(alpha_0-(4*beta_0))))
  # xmax = max(c((y_barn + 4*sigma_y),(mu0 - (4*sigma_2/kappa_0)),(alpha_0+(4*beta_0))))

#PAR?METROS POSTERIOR SIGMA
  kappa_n = kappa_0 + n
  nu_n = nu_0 + n
  #nu = sum((light-mu0)^2)/n
  #val_vero = rnorm(1000,mean = y_barn, sd = sqrt(sigma_y))
  val_vero = rnorm(1000,mean = y_barn, sd = sqrt(sigma_y))
  val_vero_m = sample(val_vero, n)
  nu = sum((val_vero_m-mu0)^2)/n
  alpha_n = nu_n/2
  beta_n = (n*nu+nu_0*sigma0_2)/2

  sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)

  gl = n + nu_0
  mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
  x = seq(0.01,0.95,length.out = 1000)
  

# A PRIORI FOR sigma^2:
  # #fy1 =  dinvgamma(x = light[light>0], shape =  alpha_0,scale = 1/beta_0)
  # val_apriori_s2 = rinvgamma(1000, shape =  alpha_0,scale = 1/beta_0) ## A veces genera inf
  # densfy1 = density(val_apriori_s2)
  # fy1 = densfy1$y
  cuant_apr_sigma = qinvgamma(p = x,shape = alpha_0,scale = 1/beta_0)
  den_apri_sigma = dinvgamma(cuant_apr_sigma,shape =alpha_0,scale = 1/beta_0)
  P = ecdf(cuant_apr_sigma)
  df1 = data.frame(cuant_apr_sigma,den_apri_sigma)
  df1_red = df1[df1$cuant_apr_sigma<cuant_apr_sigma[min(which(P(cuant_apr_sigma) > 0.95))],]

  
# A PRIORI FOR THETA GIVEN sigma^2:
  val_apriori_theta = rnorm(1000, mean = mu0, sd = sqrt(sigma_2*kappa_0))
  densfy2 = density(val_apriori_theta)
  fy2 = densfy2$y
  df2 = data.frame(val_apriori_theta)
  
# VEROSIMILITUD:
  densfy3 = density(val_vero)
  fy3 = densfy3$y
  df3 = data.frame(val_vero)
  
# POSTERIOR MARGINAL FOR SIGMA:
  # val_sigma = rinvgamma(1000,shape =  alpha_n,scale = 1/beta_n)
  # dens_val_sigma <- density(val_sigma)
  # fy4 = dens_val_sigma$y
  # fy4 = dinvgamma(x = light[light>0], shape =  alpha_n,scale = 1/beta_n)
  
  cuant_post_sigma = qinvgamma(p=x, shape=alpha_n, scale = 1/beta_n)
  den_post_sigma = dinvgamma(cuant_post_sigma, shape = alpha_n, scale = 1/beta_n)
  P = ecdf(cuant_post_sigma)
  df4 = data.frame(cuant_post_sigma,den_post_sigma)
  df4_red = df4[df4$cuant_post_sigma<cuant_post_sigma[min(which(P(cuant_post_sigma) > 0.95))],]
  
# POSTERIOR MARGINAL FOR THETA:
  val_theta = rt(1000,gl)*sqrt(sigma_n2/(n+kappa_0))+ mu_n
  dens_val_tehta <- density(val_theta)
  fy5 = dens_val_tehta$y
  df5 = data.frame(val_theta)

  line_types = c("A priori - theta"=1,"Likelihood" = 2, "Marginal posterior - theta"=3,"A priori - sigma^2"=4,"Marginal posterior - sigma^2"=5) #
  p1 = ggplot() +
    geom_density(data=df3, aes(val_vero,colour="Likelihood"),size = 1.4)+
    geom_density(data=df2, aes (val_apriori_theta,colour="A priori - theta" ),size = 1.4)+
    geom_density(data=df5, aes(val_theta,colour = "Marginal posterior - theta" ), size= 1.4)
    
  p2 = ggplot(data = df1_red, aes(cuant_apr_sigma,den_apri_sigma, colour="A priori"))+
    geom_line(size = 1.4) +
    geom_line(data = df4_red, aes(cuant_post_sigma,den_post_sigma, colour="Posterior"), size= 1.4)+
    labs(color = "Distribution.", y= "Density", x="Values")+
    ggtitle("Mean and variance unknown: prior distribution of the mean depends of variance.", subtitle = "Sigma")+
    theme_bw()

  p2
}
g2 <- f_norm_uni(98.25, 0.5376,98.6, 100, 0.001,0.001,130)
g2 <- f_norm_uni(5.5, 2,6, 50, 0.001,0.001,5)
g2 <- f_norm_uni(26.21,115.35,25,5,1,1,66)
ggplotly(g2)