#PARAMETROS A PRIORI THETA
sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) # ¿sería la forma de generar el valor de sigma^2 para ingresarlo como parámetro de la apriori de theta?
# Creencia a priori para theta
#kappa_0 = 1/k0
kappa_0=k0
#PARAMETROS POSTERIOR SIGMA
kappa_n = kappa_0 + n
nu_n = nu_0 + n
sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)
alpha_n = nu_n/2
beta_n = (nu_n*sigma_n2)/2
gl = n + nu_0
mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
# A priori for sigma^2:
fy1 = rinvgamma(10000, shape =  alpha_0,scale = 1/beta_0)
df1 = data.frame(fy1)
# A priori for theta given sigma^2:
fy2 = rnorm(10000, mean = mu0, sd = sqrt(sigma_2/k0))
df2 = data.frame(fy2)
# Verosimilitud:
fy3 = rnorm(10000, mean = y_barn, sd = sqrt(sigma_y))
df3 = data.frame(fy3)
# Posterior marginal for sigma:
fy4 = rinvgamma(10000, shape =  alpha_n,scale = 1/beta_n)
df4 = data.frame(fy4)
# Posterior marginal for theta:
fy5 = rt(10000,gl) * sqrt(sigma_n2/(n + kappa_0)) + mu_n
df5 = data.frame(fy5)
# xmin = min(c((y_barn - 4*sigma_y),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(alpha_0+(4*beta_0))))
p1 = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df2, mapping =aes(x = fy2, colour ="A priori - theta"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))+
geom_density(df4, mapping =aes(x = fy4, colour ="Marginal posterior - theta"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))
p1
}
g2 <- f_norm_uni(26.21,115.35,25,5,0.1,0.2,66)
library(invgamma)
library(plotly)
g2 <- f_norm_uni(26.21,115.35,25,5,0.1,0.2,66)
ggplotly(p1)
ggplotly(g2)
f_norm_uni = function(y_barn, sigma_y, mu0, k0, alpha_0, beta_0, n){
#PARAMETROS A PRIORI SIGMA
nu_0 = 2*alpha_0
sigma0_2 = (2*beta_0)/nu_0
#PARAMETROS A PRIORI THETA
sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) # ¿sería la forma de generar el valor de sigma^2 para ingresarlo como parámetro de la apriori de theta?
# Creencia a priori para theta
#kappa_0 = 1/k0
kappa_0=k0
#PARAMETROS POSTERIOR SIGMA
kappa_n = kappa_0 + n
nu_n = nu_0 + n
sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)
alpha_n = nu_n/2
beta_n = (nu_n*sigma_n2)/2
gl = n + nu_0
mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
# A priori for sigma^2:
fy1 = rinvgamma(10000, shape =  alpha_0,scale = 1/beta_0)
df1 = data.frame(fy1)
# A priori for theta given sigma^2:
fy2 = rnorm(10000, mean = mu0, sd = sqrt(sigma_2/k0))
df2 = data.frame(fy2)
# Verosimilitud:
fy3 = rnorm(10000, mean = y_barn, sd = sqrt(sigma_y))
df3 = data.frame(fy3)
# Posterior marginal for sigma:
fy4 = rinvgamma(10000, shape =  alpha_n,scale = 1/beta_n)
df4 = data.frame(fy4)
# Posterior marginal for theta:
fy5 = rt(10000,gl) * sqrt(sigma_n2/(n + kappa_0)) + mu_n
df5 = data.frame(fy5)
# xmin = min(c((y_barn - 4*sigma_y),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(alpha_0+(4*beta_0))))
p1 = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df2, mapping =aes(x = fy2, colour ="A priori - theta"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))+
geom_density(df4, mapping =aes(x = fy4, colour ="Marginal posterior - theta"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))
p1
}
g2 <- f_norm_uni(5.5, 2,6, 50, 3,1,100)
ggplotly(g2)
g2 <- f_norm_uni(98.25, 23.05,40, 10, 1,1,130)
ggplotly(g2)
g2 <- f_norm_uni(26.21,115.35,25,5,0.1,0.2,66)
ggplotly(g2)
library(gridExtra)
f_norm_uni = function(y_barn, sigma_y, mu0, k0, alpha_0, beta_0, n){
#PARAMETROS A PRIORI SIGMA
nu_0 = 2*alpha_0
sigma0_2 = (2*beta_0)/nu_0
#PARAMETROS A PRIORI THETA
sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) # ¿sería la forma de generar el valor de sigma^2 para ingresarlo como parámetro de la apriori de theta?
# Creencia a priori para theta
#kappa_0 = 1/k0
kappa_0=k0
#PARAMETROS POSTERIOR SIGMA
kappa_n = kappa_0 + n
nu_n = nu_0 + n
sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)
alpha_n = nu_n/2
beta_n = (nu_n*sigma_n2)/2
gl = n + nu_0
mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
# A priori for sigma^2:
fy1 = rinvgamma(10000, shape =  alpha_0,scale = 1/beta_0)
df1 = data.frame(fy1)
# A priori for theta given sigma^2:
fy2 = rnorm(10000, mean = mu0, sd = sqrt(sigma_2/k0))
df2 = data.frame(fy2)
# Verosimilitud:
fy3 = rnorm(10000, mean = y_barn, sd = sqrt(sigma_y))
df3 = data.frame(fy3)
# Posterior marginal for sigma:
fy4 = rinvgamma(10000, shape =  alpha_n,scale = 1/beta_n)
df4 = data.frame(fy4)
# Posterior marginal for theta:
fy5 = rt(10000,gl) * sqrt(sigma_n2/(n + kappa_0)) + mu_n
df5 = data.frame(fy5)
# xmin = min(c((y_barn - 4*sigma_y),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(alpha_0+(4*beta_0))))
p_theta = ggplot()+
geom_density(df2, mapping =aes(x = fy2, colour ="A priori - theta"))+
geom_density(df4, mapping =aes(x = fy4, colour ="Marginal posterior - theta"))
p_sigma = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))+
graph = grid.arrange(p_theta, p_sigma, ncol = 2, widths = c(1,2.5))
}
g2 <- f_norm_uni(5.5, 2,6, 50, 3,1,100)
f_norm_uni = function(y_barn, sigma_y, mu0, k0, alpha_0, beta_0, n){
#PARAMETROS A PRIORI SIGMA
nu_0 = 2*alpha_0
sigma0_2 = (2*beta_0)/nu_0
#PARAMETROS A PRIORI THETA
sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) # ¿sería la forma de generar el valor de sigma^2 para ingresarlo como parámetro de la apriori de theta?
# Creencia a priori para theta
#kappa_0 = 1/k0
kappa_0=k0
#PARAMETROS POSTERIOR SIGMA
kappa_n = kappa_0 + n
nu_n = nu_0 + n
sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)
alpha_n = nu_n/2
beta_n = (nu_n*sigma_n2)/2
gl = n + nu_0
mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
# A priori for sigma^2:
fy1 = rinvgamma(10000, shape =  alpha_0,scale = 1/beta_0)
df1 = data.frame(fy1)
# A priori for theta given sigma^2:
fy2 = rnorm(10000, mean = mu0, sd = sqrt(sigma_2/k0))
df2 = data.frame(fy2)
# Verosimilitud:
fy3 = rnorm(10000, mean = y_barn, sd = sqrt(sigma_y))
df3 = data.frame(fy3)
# Posterior marginal for sigma:
fy4 = rinvgamma(10000, shape =  alpha_n,scale = 1/beta_n)
df4 = data.frame(fy4)
# Posterior marginal for theta:
fy5 = rt(10000,gl) * sqrt(sigma_n2/(n + kappa_0)) + mu_n
df5 = data.frame(fy5)
# xmin = min(c((y_barn - 4*sigma_y),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(alpha_0+(4*beta_0))))
p_theta = ggplot()+
geom_density(df2, mapping =aes(x = fy2, colour ="A priori - theta"))+
geom_density(df4, mapping =aes(x = fy4, colour ="Marginal posterior - theta"))
p_sigma = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))
graph = grid.arrange(p_theta, p_sigma, ncol = 2, widths = c(1,2.5))
}
g2 <- f_norm_uni(5.5, 2,6, 50, 3,1,100)
ggplotly(g2)
class(g2)
library(patchwork)
f_norm_uni = function(y_barn, sigma_y, mu0, k0, alpha_0, beta_0, n){
#PARAMETROS A PRIORI SIGMA
nu_0 = 2*alpha_0
sigma0_2 = (2*beta_0)/nu_0
#PARAMETROS A PRIORI THETA
sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) # ¿sería la forma de generar el valor de sigma^2 para ingresarlo como parámetro de la apriori de theta?
# Creencia a priori para theta
#kappa_0 = 1/k0
kappa_0=k0
#PARAMETROS POSTERIOR SIGMA
kappa_n = kappa_0 + n
nu_n = nu_0 + n
sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)
alpha_n = nu_n/2
beta_n = (nu_n*sigma_n2)/2
gl = n + nu_0
mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
# A priori for sigma^2:
fy1 = rinvgamma(10000, shape =  alpha_0,scale = 1/beta_0)
df1 = data.frame(fy1)
# A priori for theta given sigma^2:
fy2 = rnorm(10000, mean = mu0, sd = sqrt(sigma_2/k0))
df2 = data.frame(fy2)
# Verosimilitud:
fy3 = rnorm(10000, mean = y_barn, sd = sqrt(sigma_y))
df3 = data.frame(fy3)
# Posterior marginal for sigma:
fy4 = rinvgamma(10000, shape =  alpha_n,scale = 1/beta_n)
df4 = data.frame(fy4)
# Posterior marginal for theta:
fy5 = rt(10000,gl) * sqrt(sigma_n2/(n + kappa_0)) + mu_n
df5 = data.frame(fy5)
# xmin = min(c((y_barn - 4*sigma_y),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(alpha_0+(4*beta_0))))
p_theta = ggplot()+
geom_density(df2, mapping =aes(x = fy2, colour ="A priori - theta"))+
geom_density(df4, mapping =aes(x = fy4, colour ="Marginal posterior - theta"))
p_sigma = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))
#graph = grid.arrange(p_theta, p_sigma, ncol = 2, widths = c(1,2.5))
graph = p_theta/p_sigma
}
g2 <- f_norm_uni(5.5, 2,6, 50, 3,1,100)
ggplotly(g2)
f_norm_uni = function(y_barn, sigma_y, mu0, k0, alpha_0, beta_0, n){
#PARAMETROS A PRIORI SIGMA
nu_0 = 2*alpha_0
sigma0_2 = (2*beta_0)/nu_0
#PARAMETROS A PRIORI THETA
sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) # ¿sería la forma de generar el valor de sigma^2 para ingresarlo como parámetro de la apriori de theta?
# Creencia a priori para theta
#kappa_0 = 1/k0
kappa_0=k0
#PARAMETROS POSTERIOR SIGMA
kappa_n = kappa_0 + n
nu_n = nu_0 + n
sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)
alpha_n = nu_n/2
beta_n = (nu_n*sigma_n2)/2
gl = n + nu_0
mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
# A priori for sigma^2:
fy1 = rinvgamma(10000, shape =  alpha_0,scale = 1/beta_0)
df1 = data.frame(fy1)
# A priori for theta given sigma^2:
fy2 = rnorm(10000, mean = mu0, sd = sqrt(sigma_2/k0))
df2 = data.frame(fy2)
# Verosimilitud:
fy3 = rnorm(10000, mean = y_barn, sd = sqrt(sigma_y))
df3 = data.frame(fy3)
# Posterior marginal for sigma:
fy4 = rinvgamma(10000, shape =  alpha_n,scale = 1/beta_n)
df4 = data.frame(fy4)
# Posterior marginal for theta:
fy5 = rt(10000,gl) * sqrt(sigma_n2/(n + kappa_0)) + mu_n
df5 = data.frame(fy5)
# xmin = min(c((y_barn - 4*sigma_y),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(alpha_0+(4*beta_0))))
p_theta = ggplot()+
geom_density(df2, mapping =aes(x = fy2, colour ="A priori - theta"))+
geom_density(df4, mapping =aes(x = fy4, colour ="Marginal posterior - theta"))
p_sigma = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))
#graph = grid.arrange(p_theta, p_sigma, ncol = 2, widths = c(1,2.5))
graph = p_theta+p_sigma
}
g2 <- f_norm_uni(5.5, 2,6, 50, 3,1,100)
p_sigma = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))
g2 <- f_norm_uni(5.5, 2,6, 50, 3,1,100)
ggplotly(g2)
g2 <- f_norm_uni(5.5, 2,6, 50, 3,1,100)
ggplotly(g2)
f_norm_uni = function(y_barn, sigma_y, mu0, k0, alpha_0, beta_0, n){
#PARAMETROS A PRIORI SIGMA
nu_0 = 2*alpha_0
sigma0_2 = (2*beta_0)/nu_0
#PARAMETROS A PRIORI THETA
sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) # ¿sería la forma de generar el valor de sigma^2 para ingresarlo como parámetro de la apriori de theta?
# Creencia a priori para theta
#kappa_0 = 1/k0
kappa_0=k0
#PARAMETROS POSTERIOR SIGMA
kappa_n = kappa_0 + n
nu_n = nu_0 + n
sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)
alpha_n = nu_n/2
beta_n = (nu_n*sigma_n2)/2
gl = n + nu_0
mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
# A priori for sigma^2:
fy1 = rinvgamma(10000, shape =  alpha_0,scale = 1/beta_0)
df1 = data.frame(fy1)
# A priori for theta given sigma^2:
fy2 = rnorm(10000, mean = mu0, sd = sqrt(sigma_2/k0))
df2 = data.frame(fy2)
# Verosimilitud:
fy3 = rnorm(10000, mean = y_barn, sd = sqrt(sigma_y))
df3 = data.frame(fy3)
# Posterior marginal for sigma:
fy4 = rinvgamma(10000, shape =  alpha_n,scale = 1/beta_n)
df4 = data.frame(fy4)
# Posterior marginal for theta:
fy5 = rt(10000,gl) * sqrt(sigma_n2/(n + kappa_0)) + mu_n
df5 = data.frame(fy5)
# xmin = min(c((y_barn - 4*sigma_y),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(alpha_0+(4*beta_0))))
p_theta = ggplot()+
geom_density(df2, mapping =aes(x = fy2, colour ="A priori - theta"))+
geom_density(df4, mapping =aes(x = fy4, colour ="Marginal posterior - theta"))
p_sigma = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))
graph = grid.arrange(p_theta, p_sigma, ncol = 2, widths = c(1,2.5))
}
g2 <- f_norm_uni(5.5, 2,6, 50, 3,1,100)
f_norm_uni = function(y_barn, sigma_y, mu0, k0, alpha_0, beta_0, n){
#PARAMETROS A PRIORI SIGMA
nu_0 = 2*alpha_0
sigma0_2 = (2*beta_0)/nu_0
#PARAMETROS A PRIORI THETA
sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) # ¿sería la forma de generar el valor de sigma^2 para ingresarlo como parámetro de la apriori de theta?
# Creencia a priori para theta
#kappa_0 = 1/k0
kappa_0=k0
#PARAMETROS POSTERIOR SIGMA
kappa_n = kappa_0 + n
nu_n = nu_0 + n
sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)
alpha_n = nu_n/2
beta_n = (nu_n*sigma_n2)/2
gl = n + nu_0
mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
# A priori for sigma^2:
fy1 = rinvgamma(10000, shape =  alpha_0,scale = 1/beta_0)
df1 = data.frame(fy1)
# A priori for theta given sigma^2:
fy2 = rnorm(10000, mean = mu0, sd = sqrt(sigma_2/k0))
df2 = data.frame(fy2)
# Verosimilitud:
fy3 = rnorm(10000, mean = y_barn, sd = sqrt(sigma_y))
df3 = data.frame(fy3)
# Posterior marginal for sigma:
fy4 = rinvgamma(10000, shape =  alpha_n,scale = 1/beta_n)
df4 = data.frame(fy4)
# Posterior marginal for theta:
fy5 = rt(10000,gl) * sqrt(sigma_n2/(n + kappa_0)) + mu_n
df5 = data.frame(fy5)
# xmin = min(c((y_barn - 4*sigma_y),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(alpha_0+(4*beta_0))))
p_theta = ggplot()+
geom_density(df2, mapping =aes(x = fy2, colour ="A priori - theta"))+
geom_density(df4, mapping =aes(x = fy4, colour ="Marginal posterior - theta"))
p_sigma = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))
graph = grid.arrange(p_theta, p_sigma, ncol = 1, widths = c(1,1))
}
g2 <- f_norm_uni(5.5, 2,6, 50, 3,1,100)
f_norm_uni = function(y_barn, sigma_y, mu0, k0, alpha_0, beta_0, n){
#PARAMETROS A PRIORI SIGMA
nu_0 = 2*alpha_0
sigma0_2 = (2*beta_0)/nu_0
#PARAMETROS A PRIORI THETA
sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) # ¿sería la forma de generar el valor de sigma^2 para ingresarlo como parámetro de la apriori de theta?
# Creencia a priori para theta
#kappa_0 = 1/k0
kappa_0=k0
#PARAMETROS POSTERIOR SIGMA
kappa_n = kappa_0 + n
nu_n = nu_0 + n
sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)
alpha_n = nu_n/2
beta_n = (nu_n*sigma_n2)/2
gl = n + nu_0
mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
# A priori for sigma^2:
fy1 = rinvgamma(10000, shape =  alpha_0,scale = 1/beta_0)
df1 = data.frame(fy1)
# A priori for theta given sigma^2:
fy2 = rnorm(10000, mean = mu0, sd = sqrt(sigma_2/k0))
df2 = data.frame(fy2)
# Verosimilitud:
fy3 = rnorm(10000, mean = y_barn, sd = sqrt(sigma_y))
df3 = data.frame(fy3)
# Posterior marginal for sigma:
fy4 = rinvgamma(10000, shape =  alpha_n,scale = 1/beta_n)
df4 = data.frame(fy4)
# Posterior marginal for theta:
fy5 = rt(10000,gl) * sqrt(sigma_n2/(n + kappa_0)) + mu_n
df5 = data.frame(fy5)
# xmin = min(c((y_barn - 4*sigma_y),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(alpha_0+(4*beta_0))))
p_theta = ggplot()+
geom_density(df2, mapping =aes(x = fy2, colour ="A priori - theta"))+
geom_density(df4, mapping =aes(x = fy4, colour ="Marginal posterior - theta"))
p_sigma = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))
graph = grid.arrange(p_theta, p_sigma, nrow = 2, widths = c(1,1))
}
g2 <- f_norm_uni(5.5, 2,6, 50, 3,1,100)
f_norm_uni = function(y_barn, sigma_y, mu0, k0, alpha_0, beta_0, n){
#PARAMETROS A PRIORI SIGMA
nu_0 = 2*alpha_0
sigma0_2 = (2*beta_0)/nu_0
#PARAMETROS A PRIORI THETA
sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) # ¿sería la forma de generar el valor de sigma^2 para ingresarlo como parámetro de la apriori de theta?
# Creencia a priori para theta
#kappa_0 = 1/k0
kappa_0=k0
#PARAMETROS POSTERIOR SIGMA
kappa_n = kappa_0 + n
nu_n = nu_0 + n
sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)
alpha_n = nu_n/2
beta_n = (nu_n*sigma_n2)/2
gl = n + nu_0
mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
# A priori for sigma^2:
fy1 = rinvgamma(10000, shape =  alpha_0,scale = 1/beta_0)
df1 = data.frame(fy1)
# A priori for theta given sigma^2:
fy2 = rnorm(10000, mean = mu0, sd = sqrt(sigma_2/k0))
df2 = data.frame(fy2)
# Verosimilitud:
fy3 = rnorm(10000, mean = y_barn, sd = sqrt(sigma_y))
df3 = data.frame(fy3)
# Posterior marginal for sigma:
fy4 = rinvgamma(10000, shape =  alpha_n,scale = 1/beta_n)
df4 = data.frame(fy4)
# Posterior marginal for theta:
fy5 = rt(10000,gl) * sqrt(sigma_n2/(n + kappa_0)) + mu_n
df5 = data.frame(fy5)
# xmin = min(c((y_barn - 4*sigma_y),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(alpha_0+(4*beta_0))))
p_theta = ggplot()+
geom_density(df2, mapping =aes(x = fy2, colour ="A priori - theta"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))
geom_density(df4, mapping =aes(x = fy4, colour ="Marginal posterior - theta"))
p_sigma = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))
graph = grid.arrange(p_theta, p_sigma, ncol = 2, widths = c(1,1))
}
g2 <- f_norm_uni(26.21,115.35,25,5,0.1,0.2,66)
f_norm_uni = function(y_barn, sigma_y, mu0, k0, alpha_0, beta_0, n){
#PARAMETROS A PRIORI SIGMA
nu_0 = 2*alpha_0
sigma0_2 = (2*beta_0)/nu_0
#PARAMETROS A PRIORI THETA
sigma_2 = rinvgamma(1,shape =  alpha_0,scale = 1/beta_0) # ¿sería la forma de generar el valor de sigma^2 para ingresarlo como parámetro de la apriori de theta?
# Creencia a priori para theta
#kappa_0 = 1/k0
kappa_0=k0
#PARAMETROS POSTERIOR SIGMA
kappa_n = kappa_0 + n
nu_n = nu_0 + n
sigma_n2 = (nu_0*sigma0_2 + (n-1)*sigma_y + ((n*kappa_0*(y_barn-mu0)^2)/(kappa_n)))/(nu_n)
alpha_n = nu_n/2
beta_n = (nu_n*sigma_n2)/2
gl = n + nu_0
mu_n = ((mu0*kappa_0)+(n*y_barn))/(kappa_n)
# A priori for sigma^2:
fy1 = rinvgamma(10000, shape =  alpha_0,scale = 1/beta_0)
df1 = data.frame(fy1)
# A priori for theta given sigma^2:
fy2 = rnorm(10000, mean = mu0, sd = sqrt(sigma_2/k0))
df2 = data.frame(fy2)
# Verosimilitud:
fy3 = rnorm(10000, mean = y_barn, sd = sqrt(sigma_y))
df3 = data.frame(fy3)
# Posterior marginal for sigma:
fy4 = rinvgamma(10000, shape =  alpha_n,scale = 1/beta_n)
df4 = data.frame(fy4)
# Posterior marginal for theta:
fy5 = rt(10000,gl) * sqrt(sigma_n2/(n + kappa_0)) + mu_n
df5 = data.frame(fy5)
# xmin = min(c((y_barn - 4*sigma_y),(alpha_0-(4*beta_0))))
# xmax = max(c((y_barn + 4*sigma_y),(alpha_0+(4*beta_0))))
p_theta = ggplot()+
geom_density(df2, mapping =aes(x = fy2, colour ="A priori - theta"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))+
geom_density(df4, mapping =aes(x = fy4, colour ="Marginal posterior - theta"))
p_sigma = ggplot()+
geom_density(df1, mapping = aes(x =fy1, colour="A priori - sigma^2"))+
geom_density(df5, mapping =aes(x = fy5, colour ="Marginal posterior - sigma^2"))+
geom_density(df3, mapping =aes(x = fy3, colour ="Likelihood"))
graph = grid.arrange(p_theta, p_sigma, ncol = 2, widths = c(1,1))
}
g2 <- f_norm_uni(26.21,115.35,25,5,0.1,0.2,66)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
